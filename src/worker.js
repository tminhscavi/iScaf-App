// Custom Service Worker
// This will be merged with next-pwa generated code

import { precacheAndRoute, cleanupOutdatedCaches, createHandlerBoundToURL } from 'workbox-precaching'
import { NavigationRoute, registerRoute } from 'workbox-routing'
import { NetworkFirst, CacheFirst } from 'workbox-strategies'

// Clean up old caches
cleanupOutdatedCaches()

// Precache all assets generated by next-pwa
precacheAndRoute(self.__WB_MANIFEST)

// Custom caching strategies
registerRoute(
  ({ request }) => request.destination === 'image',
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      {
        cacheKeyWillBeUsed: async ({ request }) => {
          return `${request.url}?version=1`
        }
      }
    ]
  })
)

// API caching
registerRoute(
  ({ url }) => url.pathname.startsWith('/api/'),
  new NetworkFirst({
    cacheName: 'api-cache',
    networkTimeoutSeconds: 10,
    plugins: [
      {
        cacheWillUpdate: async ({ response }) => {
          return response.status === 200 ? response : null
        }
      }
    ]
  })
)

// Handle navigation requests
const handler = createHandlerBoundToURL('/offline')
const navigationRoute = new NavigationRoute(handler, {
  denylist: [/^\/_/, /\/[^/?]+\.[^/]+$/]
})
registerRoute(navigationRoute)

// Custom push notification handler
self.addEventListener('push', (event) => {
  console.log('[SW] Push Received:', event)
  
  const data = event.data?.json() ?? {}
  const title = data.title || 'New Notification'
  const options = {
    body: data.body || 'You have a new message',
    icon: data.icon || '/icon-192x192.png',
    badge: '/icon-192x192.png',
    vibrate: [100, 50, 100],
    data: {
      url: data.url || '/',
      ...data.data
    },
    actions: [
      {
        action: 'open',
        title: 'Open',
        icon: '/icon-192x192.png'
      },
      {
        action: 'close',
        title: 'Close'
      }
    ]
  }

  event.waitUntil(
    self.registration.showNotification(title, options)
  )
})

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  console.log('[SW] Notification click:', event)
  
  event.notification.close()

  if (event.action === 'close') {
    return
  }

  const urlToOpen = event.notification.data?.url || '/'

  event.waitUntil(
    clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then((clientList) => {
        // If a window is already open, focus it
        for (const client of clientList) {
          if (client.url === urlToOpen && 'focus' in client) {
            return client.focus()
          }
        }
        // Otherwise, open a new window
        if (clients.openWindow) {
          return clients.openWindow(urlToOpen)
        }
      })
  )
})

// Background sync
self.addEventListener('sync', (event) => {
  console.log('[SW] Background sync:', event.tag)
  
  if (event.tag === 'background-sync') {
    event.waitUntil(doBackgroundSync())
  }
})

// Custom message handling
self.addEventListener('message', (event) => {
  console.log('[SW] Message received:', event.data)
  
  if (event.data && event.data.type) {
    switch (event.data.type) {
      case 'SKIP_WAITING':
        self.skipWaiting()
        break
      case 'GET_VERSION':
        event.ports[0]?.postMessage({ version: '1.0.0' })
        break
      case 'CACHE_URLS':
        event.waitUntil(cacheUrls(event.data.payload))
        break
      case 'CLEAR_CACHE':
        event.waitUntil(clearCache(event.data.cacheName))
        break
    }
  }
})

// Background sync function
async function doBackgroundSync() {
  try {
    console.log('[SW] Performing background sync...')
    
    // Get pending requests from IndexedDB or implement your sync logic
    const pendingRequests = await getPendingRequests()
    
    for (const request of pendingRequests) {
      try {
        const response = await fetch(request.url, {
          method: request.method,
          headers: request.headers,
          body: request.body
        })
        
        if (response.ok) {
          await removePendingRequest(request.id)
          console.log('[SW] Synced:', request.url)
        }
      } catch (error) {
        console.error('[SW] Sync failed for:', request.url, error)
      }
    }
  } catch (error) {
    console.error('[SW] Background sync error:', error)
  }
}

// Cache specific URLs
async function cacheUrls(urls) {
  try {
    const cache = await caches.open('custom-cache')
    await cache.addAll(urls)
    console.log('[SW] URLs cached:', urls)
  } catch (error) {
    console.error('[SW] Cache URLs error:', error)
  }
}

// Clear specific cache
async function clearCache(cacheName) {
  try {
    if (cacheName) {
      await caches.delete(cacheName)
      console.log('[SW] Cache cleared:', cacheName)
    } else {
      const cacheNames = await caches.keys()
      await Promise.all(cacheNames.map(name => caches.delete(name)))
      console.log('[SW] All caches cleared')
    }
  } catch (error) {
    console.error('[SW] Clear cache error:', error)
  }
}

// Helper functions for IndexedDB (implement based on your needs)
async function getPendingRequests() {
  // Implement your IndexedDB logic here
  return []
}

async function removePendingRequest(id) {
  // Implement your IndexedDB logic here
  console.log('[SW] Removing pending request:', id)
}

// Install event
self.addEventListener('install', (event) => {
  console.log('[SW] Installing...')
  self.skipWaiting()
})

// Activate event
self.addEventListener('activate', (event) => {
  console.log('[SW] Activating...')
  event.waitUntil(
    clients.claim().then(() => {
      console.log('[SW] Clients claimed')
    })
  )
})